{
  "name": "Nemea",
  "tagline": "System for network traffic analysis and anomaly detection.",
  "body": "## README outline\r\n- [Project status](#project-status)\r\n- [NEMEA System](#nemea-system)\r\n   - [Parts of the system](#parts-of-the-system)\r\n   - [Repositories](#repositories)\r\n- [Dependencies](#dependencies)\r\n- [Installation](#installation)\r\n   - [Binary packages](#binary-packages)\r\n   - [Source codes](#source-codes)\r\n   - [Vagrant](#vagrant)\r\n   - Packer\r\n- [Quick start and how to](#quick-start-and-how-to)\r\n   - [Try out NEMEA modules](#try-out-nemea-modules)\r\n   - [Deploy NEMEA](#deploy-nemea)\r\n   - [Create your own module in C](#create-your-own-module-in-c)\r\n   - [Add new module to running configuration](#add-new-module-to-running-configuration)\r\n- [NEMEA Related publications](#nemea-related-publications)\r\n\r\n\r\n## Project status\r\nTravis CI build: [![Build Status](https://travis-ci.org/CESNET/Nemea.svg?branch=master)](https://travis-ci.org/CESNET/Nemea)\r\n\r\n\r\n# NEMEA System\r\n\r\nNEMEA (Network Measurements Analysis) system is a **stream-wise**, **flow-based** and **modular** detection system for network traffic analysis. It consists of many independent modules which are interconnected via communication interfaces and each of the modules has its own task. Communication between modules is done by message passing where the messages contain flow records, alerts, some statistics or preprocessed data.\r\n\r\n## Parts of the system\r\n\r\nThe following picture shows all important parts of the system.\r\n\r\n![NEMEA parts](doc/NEMEA-parts.png)\r\n\r\n1. Modules - basic building blocks; separate system processes; receive stream of data on their input interfaces, process it and send another stream of data to their output interfaces; all modules are simply divided into two groups according to their task:\r\n   * **Detectors** (*red*) - detect some malicious traffic, e.g. *DNS tunnel*, *DoS*, *scanning*\r\n   * **Modules** (*yellow*) - export&storage of flow data, preprocess or postprocess the data (filter, aggregate, merge etc.)\r\n2. NEMEA Framework - set of libraries implementing features common for all modules\r\n   * **TRAP** (Traffic Analysis Platform) (*blue*) - implements communication interfaces and functions for sending/receiving the messages between interfaces\r\n   * **UniRec** (Unified Record) (*orange*) - implements efficient data format of the sent/received messages\r\n   * **Common** library (*purple*) - implements common algorithms and data structures used in modules\r\n3. **Supervisor** (*green*) - central management and monitoring tool of the NEMEA system. It takes care of running modules according to a specified configuration.\r\n\r\n## Repositories\r\n\r\nThe project is divided into four repositories added as submodules:\r\n\r\n* [NEMEA framework](https://github.com/CESNET/Nemea-Framework)\r\n* [NEMEA modules](https://github.com/CESNET/Nemea-Modules)\r\n* [NEMEA detectors](https://github.com/CESNET/Nemea-Detectors)\r\n* [NEMEA Supervisor](https://github.com/CESNET/Nemea-Supervisor)\r\n\r\n\r\n## Dependencies\r\n\r\n### Building environment\r\n\r\n* autoconf\r\n* automake\r\n* gcc\r\n* gcc-c++\r\n* libtool\r\n* libxml2-devel\r\n* libxml2-utils (contains xmllint on Debian)\r\n* make\r\n* pkg-config\r\n\r\n### Optional dependencies of modules and detectors\r\n\r\n* rpm-build (build of RPM packages)\r\n* libpcap ([flow_meter](https://github.com/CESNET/Nemea-Modules/tree/master/flow_meter))\r\n* [libnf](https://github.com/VUTBR/nf-tools/tree/master/libnf/c) or [libnfdump](http://sourceforge.net/projects/libnfdump/) ([nfreader](https://github.com/CESNET/Nemea-Modules/tree/master/nfreader))\r\n* libidn ([blacklistfilter](https://github.com/CESNET/Nemea-Detectors/tree/master/blacklistfilter))\r\n* bison and flex ([unirecfilter](https://github.com/CESNET/Nemea-Modules/tree/master/unirecfilter))\r\n\r\n### How to install dependencies:\r\n\r\n```\r\nyum install -y autoconf automake gcc gcc-c++ libtool libxml2-devel make pkg-config libpcap libidn bison flex\r\n```\r\n\r\nNote: Latest systems (e.g. Fedora) use `dnf` instead of `yum`.\r\n\r\n\r\n# Installation\r\n\r\nThere are three different ways of installation of the NEMEA system covered\r\nin this document: **vagrant**, **binary packages** and **source codes**.\r\n\r\n\r\n## Vagrant\r\n\r\nTo try the system \"out-of-box\", you can use [Vagrant](https://www.vagrantup.com/).\r\nFor more information see [./vagrant/](./vagrant/).\r\n\r\n\r\n## Binary packages\r\n\r\nThe NEMEA system can be installed from binary RPM packages.\r\nTo add CESNET repository containing the packages, run (as root/sudo):\r\n\r\n```\r\nrpm -ivh https://homeproj.cesnet.cz/rpm/liberouter/devel/x86_64/liberouter-devel-1.0.0-1.noarch.rpm\r\n```\r\n\r\nAfter that, NEMEA can be installed as any other package (run as root/sudo):\r\n```\r\nyum install nemea\r\n```\r\n\r\nNote: Latest systems (e.g. Fedora) use `dnf` instead of `yum`.\r\n\r\n\r\nFor development purposes, there is `nemea-framework-devel` package that installs\r\nall needed development files and docs.\r\n\r\nCurrently, we do not have .deb packages (for Debian/Ubuntu/...) but we are working on it. Please follow installation from [source codes](#source-codes)\r\n\r\n## Source codes\r\n\r\nThe whole system is based on GNU/Autotools build system that makes dependency checking and\r\nbuilding process much more easier.\r\n\r\nTo clone the NEMEA repositories, use:\r\n\r\n```\r\ngit clone --recursive https://github.com/CESNET/nemea\r\n```\r\n\r\nAfter successful clone and [dependencies](#dependencies) installation (**!**), use:\r\n\r\n```\r\n./bootstrap.sh\r\n```\r\n\r\nthat will create `configure` scripts and other needed files.\r\n\r\nThe `configure` script supplies various possibilities of\r\nconfiguration and it uses some environmental variables that influence the build\r\nand compilation process. For more information see:\r\n\r\n```\r\n./configure --help\r\n```\r\n\r\nWe recommend to set paths according to the used operating system, e.g.:\r\n\r\n```\r\n./configure --prefix=/usr --bindir=/usr/bin/nemea --sysconfdir=/etc/nemea --libdir=/usr/lib64\r\n```\r\n\r\nAfter finishing `./configure`, build process can be started by:\r\n\r\n```\r\nmake\r\n```\r\n\r\nThe make(1) tool has various parameters, to build the NEMEA package faster on\r\nmulticore systems, we recommend to use parameter -j with the number of jobs\r\nthat should be run in parallel.\r\n\r\nWhen the compilation process ends without any error, the package can be installed\r\ninto paths that were set by `configure`. It is recommended NOT to change\r\ntarget paths by passing variables directly to make(1).\r\nThe installation can be done by (usually it requires root / sudo):\r\n\r\n```\r\nmake install\r\n```\r\n\r\nCongratulations, the whole NEMEA system should be installed right now... :-)\r\n\r\n\r\n# Quick start and how to\r\n\r\n\r\n## Try out NEMEA modules\r\n\r\n### Execute a module\r\n\r\nNEMEA modules using have two implicit arguments. `module -h` for help\r\n(optional) and `module -i IFC_SPEC` for communication interface (IFC)\r\nspecification.  The `-i` parameter is mandatory for all NEMEA modules.\r\n\r\n\r\n**Module help `-h`**\r\n\r\nThe example below shows part of help output of [logger](https://github.com/CESNET/Nemea-Modules/tree/master/logger).\r\nIt contains module's name, description, number of input and output IFC, modules\r\nparameters and TRAP library parameters (common for all modules).\r\n\r\n\r\n```\r\nTRAP module, libtrap version: 0.7.6 b258bb4\r\n===========================================\r\nName: Logger\r\nInputs: variable\r\nOutputs: 0\r\nDescription:\r\n  This module logs all incoming UniRec records to standard output or into a specified file. Each record\r\n  is written as one line containing values of its fields in human-readable format separated by chosen\r\n  delimiters (CSV format). If you use more than one input interface you have to specify output format by\r\n  parameter \"-o\".\r\n\r\nUsage:  logger [COMMON]... [OPTIONS]...\r\n\r\nParameters of module [OPTIONS]:\r\n-------------------------------\r\n  -w  --write <string>             Write output to FILE instead of stdout (rewrite the file).\r\n\r\n  -a  --append <string>            Write output to FILE instead of stdout (append to the end).\r\n\r\n  -t  --title                      Write names of fields on the first line.\r\n\r\n  -c  --cut <uint32>               Quit after N records are received, 0 can be useful in combination\r\n                                   with -t to print UniRec.\r\n\r\nCommon TRAP parameters [COMMON]:\r\n--------------------------------\r\n  -h [trap,1]                      If no argument, print this message. If \"trap\" or 1 is given, print\r\n                                   TRAP help.\r\n\r\n  -i IFC_SPEC                      Specification of interface types and their parameters, see \"-h trap\"\r\n                                   (mandatory parameter).\r\n\r\n  -v                               Be verbose.\r\n\r\nEnvironment variables that affects output:\r\n------------------------------------------\r\n  LIBTRAP_OUTPUT_FORMAT            If set to \"json\", information about module is printed in JSON format.\r\n\r\n  PAGER                            Show the help output in the set PAGER.\r\n```\r\n\r\n\r\n**Interface specifier `-i`**\r\n\r\nThe `-i` parameter with the interface specifier *IFC_SPEC* (`module -i IFC_SPEC`)\r\nspecifies modules interfaces - their types and parameters.  The interface\r\nspecifier has the following format:\r\n\r\n`<IFC 1>,<IFC 2>,...,<IFC N>`\r\n\r\nwhere `<IFC x>` looks like\r\n\r\n`<type>:<par1>:<par2>:...:<parN>`.\r\n\r\n`<type>` can be one of the following: `t` - TCP socket (for remote\r\ncommunication), `u` - UNIX socket (for local communication), `b` - blackhole to\r\ndrop all messages during sending, `f` - File IFC.\r\n\r\nInterfaces are separated by `,` and their parameters are separated by `:`.\r\nInput IFCs must be specified at first, output IFCs follow. Examples below show\r\n\r\nExample:\r\n\r\n```\r\nmodule1 -i t:address:port1,t:port2\r\n```\r\n\r\n*module1* uses TCP interfaces (for machine to machine communication). Let's\r\nassume it has one input and one output interface (number of input and output\r\nIFCs is given by programmer of the module). Therefore, input IFC will connect\r\nto `address:port1` and output IFC will listen on `port2`.\r\n\r\nTCP type of IFC expects mandatory parameter `port` and optionally, additional\r\nparameter `address` (as it is used in example).  Default value of `address` is\r\n`localhost`.\r\n\r\n\r\nExample:\r\n\r\n```\r\nmodule2 -i u:sock1,u:sock2\r\n```\r\n\r\nUNIX type of IFC expects unique identifier of the socket.  For compatibility\r\nwith TCP IFC, `address` can be specified but **it has no effect!**\r\n\r\n\r\n**Important findings:**\r\n\r\n* TCP interface for machine to machine communication, UNIX-SOCKET for communication on the same machine\r\n* input interface behaves as a client, output interfaces behaves as a server\r\n\r\nDetailed information and another examples of *IFC_SPEC* can be found in [libtrap/README.ifcspec.md](https://github.com/CESNET/Nemea-Framework/blob/master/libtrap/README.ifcspec.md).\r\n\r\n\r\n### Interconnect two modules\r\n\r\nLet´s try to interconnect\r\n[logreplay](https://github.com/CESNET/Nemea-Modules/tree/master/logreplay) and\r\n[logger](https://github.com/CESNET/Nemea-Modules/tree/master/logger) modules to\r\nsee them communicate.\r\nLogreplay module has one output IFC.  It reads CSV file created by logger\r\nmodule and sends it in UniRec format.  Logger has one input interface and it\r\nlogs all incoming UniRec records to standard output or into specified file in\r\nCSV format.  These two modules can be interconnected using one input IFC and\r\none output IFC.\r\n\r\n[use-cases/logger-repeater.sh](https://github.com/CESNET/Nemea/blob/master/use-cases/logger-repeater.sh)\r\ncan be used for the demonstration. With no parameter, it prints help with\r\ndescription.  With *generate* parameter, the script creates a CSV file with header and 3\r\nflow records (see\r\n[use-cases/logger-repeater.sh#L53](https://github.com/CESNET/Nemea/blob/master/use-cases/logger-repeater.sh#L53)).\r\nThereafter it executes logreplay and logger modules\r\n\r\n```\r\nlogreplay -i \"u:my_socket\"` -f CSV_file\r\n```\r\nand\r\n```\r\nlogger -i \"u:my_socket\" -t\r\n```\r\n\r\nLogreplay has one UNIX output IFC listening on *my_socket* and logger has one UNIX input IFC which connects to *my_socket*.\r\n\r\nTo see the effect, go to `use-cases/` and execute the script:\r\n```\r\n./logger-repeater.sh generate\r\n```\r\n\r\nIt should print exactly the same output as generated CSV tmp input (header and\r\n3 records). In\r\n[use-cases](https://github.com/CESNET/Nemea/tree/master/use-cases) there are\r\nmore examples with basic modules.\r\n`logreplay` is one of possible ways of getting data into the NEMEA system.\r\n\r\nOther data sources are discussed later in [Get flows to your system](https://github.com/CESNET/Nemea#4-get-flows-to-your-system).\r\n\r\n\r\n## Deploy NEMEA\r\n\r\nThis section shows how to deploy NEMEA in four steps.\r\n\r\nIt only covers the basics needed to run the system in its default\r\nconfiguration.  Keep in mind that NEMEA was designed as a very flexible\r\nframework, so every user can (and should) adjust the configuration of NEMEA\r\nmodules to their own purposes.\r\n\r\n\r\n### 1. Installation\r\n\r\nFirst of all, the whole system (NEMEA Framework, Modules, Detectors and\r\nSupervisor) has to be installed.  Follow [installation instructions](#installation) to\r\ninstall the system from RPM or from source codes.\r\n\r\n\r\n### 2. Prepare configurations\r\n\r\nTo avoid manual control of the system, there is [NEMEA Supervisor](https://github.com/CESNET/Nemea-Supervisor).\r\nIt is a central management and monitoring tool of the system and it takes care of running\r\nmodules **according to a specified XML configuration**.\r\n\r\nWe need to prepare XML configuration file for Supervisor.  Fortunately, almost\r\neverything is already done.\r\n\r\nAfter installation (from RPM or from source codes with recommended `configure`\r\nparameters), there are 2 important paths with configurations:\r\n* `/ush/share/nemea-supervisor/` - contains default prepared XML configuraions of all NEMEA modules (like [nemea-supervisor/configs/](https://github.com/CESNET/Nemea-Supervisor/tree/master/configs))\r\n* `/etc/nemea/` - contains XML configuration file for Supervisor and directories with used modules configurations (they are empty after installation)\r\n\r\nNote: these two paths depend on *datarootdir* and *sysconfdir* parameters of the `configure` script during the installation.\r\n\r\nThe only thing we have to do is this (probably with sudo / root):\r\n```\r\ncp -r /usr/share/nemea-supervisor/*/ /etc/nemea\r\n```\r\n\r\nAfter this command, supervisor will use default configurations of the modules.\r\nIt is shown in [nemea-supervisor/configs/supervisor_config_template.xml.in#L8](https://github.com/CESNET/Nemea-Supervisor/blob/master/configs/supervisor_config_template.xml.in#L8)\r\nthat the paths from `sysconfdir` (`/etc/nemea/` in our case) are included in the\r\nconfiguration file.  For detailed information about supervisor configuration\r\nsee [README](https://github.com/CESNET/Nemea-Supervisor#configuration) of Supervisor.\r\n\r\n\r\n### 3. Start and control modules\r\n\r\nOnce the configurations are prepared, modules can be managed by Supervisor. It can be easily started as a systemd service with\r\n\r\n`service nemea-supervisor start` (recommended, probably with root / sudo)\r\n\r\nor manually\r\n\r\n`/usr/bin/nemea/supervisor --daemon -T /etc/nemea/supervisor_config_template.xml -L /var/log/nemea-supervisor`\r\nNote: manual approach does not change UID that supervisor runs with.\r\nContrary, using `service`, NEMEA runs as `nemead` UID and `nemead` GID.\r\n\r\nSee all service commands in\r\n[README](https://github.com/CESNET/Nemea-Supervisor#program-modes) and all\r\nprogram parameters with `/usr/bin/nemea/supervisor -h`.  You can also check\r\nwhether the process is running or not with `ps -ef | grep supervisor`.\r\nIf Supervisor has not started successfully, it should print error info directly\r\nto system log (in case of service), which can be browsed with `journalctl -xe`,\r\nor to stdout (in case of manual start).  Runtime errors and events can be\r\nfound in `supervisor_log` file located in the -L directory\r\n(`/var/log/nemea-supervisor` by default).\r\n\r\nNow we can connect to running supervisor with supervisor client simply with\r\ncommand `supcli`.  The menu with options is described in detail\r\nin [README](https://github.com/CESNET/Nemea-Supervisor#supervisor-functions).\r\nAfter pressing number *4* and *enter*, it prints current status of the system.\r\nBy default, all *detectors* and *loggers* (except flow_meter logger) should be\r\nenabled and running.\r\n\r\nThe modules are running, but they don't receive any data yet. We need to send\r\nsome flow data to the system...\r\n\r\n\r\n### 4. Get flows to your system\r\n\r\n**IPFIXcol**\r\n\r\n*(recommended)* Use IPFIXcol to collect NetFlow/IPFIX data from routers/probes\r\nand an [IPFIXcol](https://github.com/CESNET/ipfixcol) [unirec plugin](https://github.com/CESNET/ipfixcol/tree/master/plugins/storage/unirec)\r\nto re-send the data to NEMEA.\r\n  * needed to install IPFIXcol and the plugin and to set up the routers/probes\r\n  * default and recommended solution for production\r\n\r\n\r\n**FlowMeter**\r\n\r\nUse NEMEA internal flow exporter (*flow_meter* module).\r\n  * it reads data directly from network interface (via libpcap), measures flows and export it to other NEMEA modules\r\n  * simple, but not very performing solution (flow_meter was not designed for performance), suitable only for testing or very small networks\r\n    * *TODO*: measure how much traffic can flow_meter handle and make recommendation what \"very small network\" means?\r\n\r\n\r\n**NfReader**\r\n\r\n[NfReader](https://github.com/CESNET/Nemea-Modules/tree/master/nfreader) reads\r\n**nfdump** files and sends flow records in UniRec format on its output TRAP\r\ninterface.\r\n\r\n\r\n**LogReplay**\r\n\r\n[LogReplay](https://github.com/CESNET/Nemea-Modules/tree/master/logreplay)\r\nconverts CSV format of data, from logger module to UniRec format and sends it\r\nto the output interface.\r\n\r\n\r\n## Create your own module in C\r\n\r\n**Important**: Nemea-Framework has to be installed in advance.  Follow\r\n[installation instructions](#installation)\r\n\r\n\r\n#### Use Example module as a template\r\n\r\nLet `~/mighty-module/` be the directory we want to develop our module in (replace path `~/mighty-module/` in all commands with another directory if needed) and *mighty_module* the name of our module.  We will use example module as a template - copy the directory [nemea-framework/examples/module/](https://github.com/CESNET/Nemea-Framework/tree/master/examples/module) to `~/mighty-module/`.\r\n\r\nIn `~/mighty-module/configure.ac` update the following lines\r\n```\r\nAC_INIT([example_module], [1.0.0], [traffic-analysis@cesnet.cz])\r\nAC_CONFIG_SRCDIR([example_module.c])\r\n```\r\nwith\r\n```\r\nAC_INIT([migty_module], [1.0.0], [YOUR EMAIL ADDRESS])\r\nAC_CONFIG_SRCDIR([mighty_module.c])\r\n```\r\n\r\nIn `/data/mighty-module/Makefile.am` update the following lines\r\n```\r\nbin_PROGRAMS=example_module\r\nexample_module_SOURCES=example_module.c fields.c fields.h\r\nexample_module_LDADD=-lunirec -ltrap\r\n```\r\nwith\r\n```\r\nbin_PROGRAMS=mighty_module\r\nmighty_module_SOURCES=mighty_module.c fields.c fields.h\r\nmighty_module_LDADD=-lunirec -ltrap\r\n```\r\n\r\nFinally, execute\r\n```\r\nmv /data/mighty-module/example_module.c /data/mighty-module/mighty_module.c\r\n```\r\nto rename the source file.\r\n\r\n\r\n#### Build the module\r\n\r\nExecute the following commands in `~/might-module/`:\r\n\r\n1) Let Autotools process the configuration files.\r\n\r\n```\r\nautoreconf -i\r\n```\r\n\r\n2) Configure the module directory.\r\n\r\n```\r\n./configure\r\n```\r\n\r\n3) Build the module.\r\n\r\n```\r\nmake\r\n```\r\n\r\n4) (**Optional**) Install the module. The command should be performed as root (e.g. using sudo).\r\n```\r\nmake install\r\n```\r\n\r\n\r\n### Code explanation\r\n\r\nThe example module already links **TRAP** (libtrap) and **UniRec** libraries.\r\nIt is a simple module with one input and one output interface which receives on\r\ninput inteface a message in UniRec format with two numbers and sends them\r\ntogether with their sum to output interface.\r\n\r\nThe code contains comments but here is the list of important operations:\r\n\r\n\r\n#### Libtrap\r\n\r\nGenerated doxygen doc for module developers: https://rawgit.com/CESNET/Nemea-Framework/master/libtrap/doc/doxygen/html/index.html\r\n\r\nGenerated doxygen doc for libtrap developers: https://rawgit.com/CESNET/Nemea-Framework/master/libtrap/doc/devel/html/index.html\r\n\r\n1. [Basic module information](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L74) - specify name, description and number of input / output interfaces of the module\r\n2. [Module parameters](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L87) - define parameters the module accepts as program arguments\r\n3. [Module info structure initialization](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L111) - initialize a structure with information from the two previous points\r\n4. [TRAP initialization](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L116) - initialize module interfaces\r\n5. [GETOPT macro](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L127) - parse program arguments\r\n6. Main loop:\r\n   * [Receive a message](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L172) - receive a message in UniRec format from input interface\r\n   * [Handle receive error](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L175) - check whether an error has occured during receive\r\n   * [Send a message](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L200) - send a message in UniRec format via output interface\r\n   * [Handle send error](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L203) - check whether an error has ocurred during send\r\n7. [TRAP and module info clean-up](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L210) - free everything, libtrap finalization\r\n\r\n\r\n#### UniRec\r\n\r\nGenerated doxygen doc: https://rawgit.com/CESNET/Nemea-Framework/master/unirec/doc/html/index.html\r\n\r\n1. [UniRec fields definition](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L62) - define data types and names of the fields which will be used in UniRec messages (both received and sent messages), e.g. *uint32 PACKETS*\r\n2. [Templates creation](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L141) - create UniRec templates separately for every interface (a template defines set of fields in the message) note: two input interfaces receiving same messages can use one template\r\n3. [Output record allocation](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L154) - allocate a memory for message sent via output interface\r\n4. Main loop (*fields manipulation*):\r\n   * [get field](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L191) - get a value of specified field from received message according to UniRec template\r\n   * [set field](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L196) - set a value of specified field in message which will be sent according to UniRec template\r\n   * [copy fields](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L195) - copy values of fields in received message to fields in message which will be sent according to UniRec templates of both interfaces (only fields that are common for both interfaces are copied)\r\n5. [UniRec cleanup](https://github.com/CESNET/Nemea-Framework/blob/master/examples/module/example_module.c#L219) - free everything, UniRec finalization\r\n\r\n\r\n### Execute the module\r\n\r\n#### Module help\r\n\r\nAfter executing `/data/mighty-module/mighty_module -h`, program prints help which contains information from module info structure:\r\n\r\n* module basic information - name, description, number of input / output interfaces\r\n* module parameters - short opt, long opt, description, argument data type\r\n* TRAP library parameters - parameters common for all modules using libtrap\r\n\r\n\r\n### Develop the module\r\n\r\nNow just modify the algorithm in the main loop and the job is done :-)\r\n\r\n\r\n## Add new module to running configuration\r\n\r\nThis section is for those who has already deployed the system ([Deploy NEMEA](#deploy-nemea)\r\nsection) and wants to add their module to the running configuration.  It can be done in 3 steps:\r\n\r\n1. Create a *.sup* config file for your module. You can use [this](https://github.com/CESNET/Nemea-Supervisor/blob/master/configs/template.sup#L10) empty template and fill it according to [this](https://github.com/CESNET/Nemea-Supervisor/blob/master/configs/detectors/dnstunnel_detection.sup) example ([example with comments](https://github.com/CESNET/Nemea-Supervisor/blob/master/configs/config_example.xml#L19)).\r\n2. Add the new *.sup* file to directory included in the Supervisor configuration file. If you have used recommended parameters of the `configure` script during the installation, both the configuration file and the directories should be located in `/etc/nemea`, otherwise check the paths in the configuration file the Supervisor is running with. Than copy the file to one of the directories you want e.g. `cp ./your_module.sup /etc/nemea/others`.\r\n3. Connect to Supervisor using `supcli` command and select option 6 *reload configuration*. New module should be added and if the enabled flag is set to *true*, it should be also running.\r\n\r\nFor detailed information about Supervisor configuration see its [README](https://github.com/CESNET/Nemea-Supervisor#configuration).\r\n\r\n\r\n\r\nNEMEA Related Publications\r\n==========================\r\n\r\n* Tomas Cejka, Marek Svepes. [Analysis of Vertical Scans Discovered by Naive Detection](http://dx.doi.org/10.1007/978-3-319-39814-3_19). Management and Security in the Age of Hyperconnectivity: 10th IFIP WG 6.6 International Conference on Autonomous Infrastructure, Management, and Security, AIMS 2016.\r\n\r\n* Tomáš Čejka, Radoslav Bodó, Hana Kubátová: Nemea: Searching for Botnet Footprints. In: Proceedings of the 3rd Prague Embedded Systems Workshop (PESW), Prague, CZ, 2015.\r\n\r\n* Tomáš Čejka, Václav Bartoš, Lukáš Truxa, Hana Kubátová: [Using Application-Aware Flow Monitoring for SIP Fraud Detection](http://link.springer.com/chapter/10.1007/978-3-319-20034-7_10). In: Proc. of 9th International Conference on Autonomous Infrastructure, Management and Security (AIMS15), 2015.\r\n\r\n* Tomáš Čejka, Zdeněk Rosa and Hana Kubátová: [Stream-wise Detection of Surreptitious Traffic over DNS](http://ieeexplore.ieee.org/xpl/articleDetails.jsp?reload=true&arnumber=7033254). In: Proc. of 19th IEEE International Workshop on Computer Aided Modeling and Design of Communication Links and Networks (CAMAD 2014). Athens, 2014.\r\n\r\n* Václav Bartoš, Martin Žádník, Tomáš Čejka: [Nemea: Framework for stream-wise analysis of network traffic](http://www.cesnet.cz/wp-content/uploads/2014/02/trapnemea.pdf), CESNET technical report 6/2013.\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}